###############################################################################################
# Filename: Description
# Owner: Shreyas Sawant
# Purpose of code: Following code provides a description for the Socratic Tutor chatvot.
# Copyright (c) 2024 by Shreyas Sawant All Rights Reserved
# Last modified: 11-06-2024
###############################################################################################

import streamlit as st

# Web Page configuration.
st.set_page_config(
    page_title = "RAG buddy",
    page_icon = "ðŸ’¯",
    layout = "wide",
)

st.markdown(
    """
    # RAG Buddy!!
    This is a brief description for the RAG buddy chatbot.
    ## What is RAG Buddy?
    RAG Buddy is a chatbot that uses the RAG technique for resolving all your queries related to a specific document.
    Retrieval Augmented Generation (RAG) is a very useful technique for generating content based on a specific context.
    This technique allows the LLMs to closely keep the context of a conversation and improves their accuracy drastically.
    However, this improvement is only for the data that you have provided. There is no fine tuning involved here.

    ## How does it work?
    RAG Buddy has the following steps before generating a result:
    * Receive Data: The user provides data in the form of a PDF document, which is passed to the PyPdfLoader module.
    * Preprocess data: The document is initially in a raw form. It is necessary to convert it into a form that can be understood by the LLM.
                       This involves splitting the characters of the document. Thus, each character is split from one another.
                       This process is the most time consuming and heavily depends on the size of the document.
    * Upload data to a Database: Once the document characters are split, they are provided to a vector database. 
                                 There are many options available, however, I have used ChromaDB for this project.
                                 I upload the document and the embeddings that are going to be used to the ChrmaDB.
    * Generating response: Finally, based on the input prompt, the result is generated by the LLM. 

    ## How do I use it?
    I know using LLMs and providing the right prompt can be tricky sometimes. However, in this chatbot, I have simplified it as much as possible.
    Following is the process: 
    * If you are new, create a username on the intorduction page. Or if you already have an account, then you can click on "yes" button
      it shall take you to the chatbot page.
    * On the chatbot page, you have to enter your username as a verification step. After that, if your username was valid, then you shall
      see an option to upload your PDFs. Upon doing that, the chatbot shall initiate for chating.
    
    ## Key Features: 
    * It follows the same protocol for encryption as seen on Socratic tutor. This give RAG Buddy the capabilities of encrypted usernames, and the same
      safety measures implemented on Socratic tutor.
    * It also has the ability to maintain the chat history.
    * I have integrated settings menu as well. So deleting history and accounts is also possible.
    * A breakthrough feature is caching. I'll explain with an example.
      You are using a PDF as a context and as you may know the initial setup process was a little time taking.
      However, this latency doesn't reflect on the chating. This is because the data of PDF is temporarily cached.
    * Another feature is that when the PDF is changed, the model understands the change in document and 
      automatically shifts the context. This means you do not have to manually clear the cache.
    """
)